<?php

/**
 * @file
 * Install, update and uninstall functions for the Date module.
 */

/**
 * Implements hook_field_schema().
 */
function date_field_schema($field) {

  switch ($field['type']) {

    case 'datestamp':
      $columns = array(
	    'value' => array(
        'type' => 'int',
        'not null' => FALSE,
        'sortable' => TRUE,
        'views' => TRUE,
		),
      );
      break;

    case 'datetime':
      $columns = array(
	    'value' => array(
        'type' => 'datetime',
        'mysql_type' => 'DATETIME',
        'pgsql_type' => 'timestamp without time zone',
        'sqlite_type' => 'varchar',
        'sqlsrv_type' => 'smalldatetime',
        'not null' => FALSE,
        'sortable' => TRUE,
        'views' => TRUE,
		),
      );
      break;

    default:
      $columns = array(
	    'value' => array(
        'type' => 'varchar',
        'length' => 20,
        'not null' => FALSE,
        'sortable' => TRUE,
        'views' => TRUE,
		),
      );
      break;
  }

  // If a second date is needed for 'End date', make a copy of the first one.
  if (!empty($field['settings']['todate'])) {
    $columns['value2'] = $columns['value'];

    // We don't want Field API to create additional columns, just the first.
    // We modify them our own way in views data.
    $columns['value2']['views'] = FALSE;
  }
  // Timezone and offset columns are used only if date-specific dates are used.
  if (isset($field['settings']['tz_handling']) && $field['settings']['tz_handling'] == 'date') {
    $columns = array(
	  'timezone' => array(
      'type' => 'varchar',
      'length' => 50,
      'not null' => FALSE,
      'sortable' => TRUE,
      'views' => FALSE,
	  ),
    );
    $columns = array(
	  'offset' => array(
      'type' => 'int',
      'not null' => FALSE,
      'sortable' => TRUE,
      'views' => FALSE,
	  ),
    );
    if (!empty($field['settings']['todate'])) {
      $columns = array(
	    'offset2' => array(
        'type' => 'int',
        'not null' => FALSE,
        'sortable' => TRUE,
          'views' => FALSE,
	    ),
      );
    }
  }
  if (isset($field['settings']['repeat']) && $field['settings']['repeat'] == 1) {
    $columns = array(
	  'rrule' => array(
      'type' => 'text',
      'not null' => FALSE,
      'sortable' => FALSE,
      'views' => FALSE,
	  ),
    );
  }
  return array(
    'columns' => $columns,
  );
}

/**
 * Implements hook_update_last_removed().
 */
function date_update_last_removed() {
  return 6005;
}

/**
 * Get rid of the individual formatters for each format type.
 *
 * These are now settings in the default formatter.
 */
function date_update_7000() {
  $instances = field_info_instances();
  foreach ($instances as $entity_type => $entities) {
    foreach ($entities as $bundle => $fields) {
      foreach ($fields as $field_name => $instance) {
        if (in_array($instance['widget']['type'], array('date_popup'))) {
          $changed = FALSE;
          foreach ($instance['display'] as $context => $display) {
            if ($display['type'] != 'date_default' && $display['type'] != 'date_interval' && $display['type'] != 'hidden') {
              $instance['display'][$context]['type'] = 'date_default';
              $instance['display'][$context]['settings']['format_type'] = str_replace('date_', '', $display['type']);
              $changed = TRUE;
            }
          }
          if ($changed) {
            field_update_instance($instance);
          }
        }
      }
    }
  }
}

/**
 * Move date settings from variables to config.
 */
function date_update_1000() {
  // Migrate selected variables to config.
  // Use Backdrop core for date formats (system.date.settings)
  // Also use settings in date_api.settings.json
  $config = config('date.settings');
  $config->set('_show_repeat_rule', update_variable_get('_show_repeat_rule', 'show'));
  $config->set('_multiple_number', update_variable_get('_multiple_number', ''));
  $config->set('_multiple_from', update_variable_get('_multiple_from', ''));
  $config->set('_multiple_to', update_variable_get('_multiple_to', ''));
  $config->set('_fromto', update_variable_get('_fromto', ''));
  $config->set('install_task', update_variable_get('install_task', ''));
  $config->set('date_popup_timepicker', update_variable_get('date_popup_timepicker', '$preferred_timepicker'));
  $config->set('teaser_length', update_variable_get('teaser_length', '600'));
  $config->save();

  foreach ($results as $record) {
    $instance = unserialize($record['data']);
    if (in_array($instance['widget']['type'], array(
        'date_popup_repeat',
        'date_text_repeat',
        'date_select_repeat'
      ))) {
      $instance['widget']['type'] = str_replace('_repeat', '', $instance['widget']['type']);
      db_update('field_config_instance')
        ->fields(array(
          'data' => serialize($instance),
        ))
        ->condition('field_name', $record['field_name'])
        ->condition('entity_type', $record['entity_type'])
        ->condition('bundle', $record['bundle'])
        ->execute();
    }
  }
  field_cache_clear();
  drupal_set_message(t('The widgets for repeating dates have changed. Please check the Display Fields page for each content type that has repeating date fields and confirm that the right widget has been selected.'), 'warning');
}

/**
 * Implements hook_update_last_removed().
 */
function date_update_last_removed() {
  return 7004;
}
